{"id":"../../node_modules/core-js/internals/regexp-exec.js","dependencies":[{"name":"C:\\Users\\newbu\\Documents\\naijatours\\package.json","includedInParent":true,"mtime":1578885759920},{"name":"C:\\Users\\newbu\\Documents\\naijatours\\.babelrc","includedInParent":true,"mtime":1578885578538},{"name":"C:\\Users\\newbu\\Documents\\naijatours\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1578884568474},{"name":"./regexp-flags","loc":{"line":2,"column":26},"parent":"C:\\Users\\newbu\\Documents\\naijatours\\node_modules\\core-js\\internals\\regexp-exec.js","resolved":"C:\\Users\\newbu\\Documents\\naijatours\\node_modules\\core-js\\internals\\regexp-flags.js"},{"name":"./regexp-sticky-helpers","loc":{"line":3,"column":28},"parent":"C:\\Users\\newbu\\Documents\\naijatours\\node_modules\\core-js\\internals\\regexp-exec.js","resolved":"C:\\Users\\newbu\\Documents\\naijatours\\node_modules\\core-js\\internals\\regexp-sticky-helpers.js"}],"generated":{"js":"'use strict';\nvar regexpFlags = require('./regexp-flags');\nvar stickyHelpers = require('./regexp-sticky-helpers');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n    var sticky = UNSUPPORTED_Y && re.sticky;\n    var flags = regexpFlags.call(re);\n    var source = re.source;\n    var charsAdded = 0;\n    var strCopy = str;\n\n    if (sticky) {\n      flags = flags.replace('y', '');\n      if (flags.indexOf('g') === -1) {\n        flags += 'g';\n      }\n\n      strCopy = String(str).slice(re.lastIndex);\n      // Support anchored sticky behavior.\n      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\\n')) {\n        source = '(?: ' + source + ')';\n        strCopy = ' ' + strCopy;\n        charsAdded++;\n      }\n      // ^(? + rx + ) is needed, in combination with some str slicing, to\n      // simulate the 'y' flag.\n      reCopy = new RegExp('^(?:' + source + ')', flags);\n    }\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + source + '$(?!\\\\s)', flags);\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = nativeExec.call(sticky ? reCopy : re, strCopy);\n\n    if (sticky) {\n      if (match) {\n        match.input = match.input.slice(charsAdded);\n        match[0] = match[0].slice(charsAdded);\n        match.index = re.lastIndex;\n        re.lastIndex += match[0].length;\n      } else re.lastIndex = 0;\n    } else if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/core-js/internals/regexp-exec.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}}],"sources":{"../../node_modules/core-js/internals/regexp-exec.js":"'use strict';\nvar regexpFlags = require('./regexp-flags');\nvar stickyHelpers = require('./regexp-sticky-helpers');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n    var sticky = UNSUPPORTED_Y && re.sticky;\n    var flags = regexpFlags.call(re);\n    var source = re.source;\n    var charsAdded = 0;\n    var strCopy = str;\n\n    if (sticky) {\n      flags = flags.replace('y', '');\n      if (flags.indexOf('g') === -1) {\n        flags += 'g';\n      }\n\n      strCopy = String(str).slice(re.lastIndex);\n      // Support anchored sticky behavior.\n      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\\n')) {\n        source = '(?: ' + source + ')';\n        strCopy = ' ' + strCopy;\n        charsAdded++;\n      }\n      // ^(? + rx + ) is needed, in combination with some str slicing, to\n      // simulate the 'y' flag.\n      reCopy = new RegExp('^(?:' + source + ')', flags);\n    }\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + source + '$(?!\\\\s)', flags);\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = nativeExec.call(sticky ? reCopy : re, strCopy);\n\n    if (sticky) {\n      if (match) {\n        match.input = match.input.slice(charsAdded);\n        match[0] = match[0].slice(charsAdded);\n        match.index = re.lastIndex;\n        re.lastIndex += match[0].length;\n      } else re.lastIndex = 0;\n    } else if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n"},"lineCount":88}},"error":null,"hash":"c93f8c7010fb743ba5850831048fcf8c","cacheData":{"env":{}}}